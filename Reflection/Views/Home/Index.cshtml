@{
    Layout = "";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" />
    <link href="~/CSS/Index.css" rel="stylesheet" type="text/css" />
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="@("https://unpkg.com/@microsoft/teams-js@1.4.1/dist/MicrosoftTeams.min.js")"></script>
    <title>Reflect</title>

</head>

<body>
    <div class="container">
        <div class="" role="document">
            <div class="modal-content mc">
                <div class="modal-body modal-mb">
                    <div class="question">Question</div>
                    <div class="custom-in">
                        <input list="questions" name="questions" id="questions-list" class="input-select" placeholder="Please select or enter question" onchange="getSelectedOption(this)" />
                        <datalist id="questions" class="htmlEle">
                        </datalist>
                        <span class="sel-chev"></span>
                    </div>

                    <div class="privacy">Privacy</div>
                    <div class="input-group custom-in">
                        <select class="cs htmlEle" id="privacy" onchange="setPrivacy()">
                            <option value="public" selected>Public - Names will be displayed with responses</option>
                            <option value="anonymous">Anonymous - Names will be omitted from responses</option>
                        </select>
                        <span class="sel-chev3"></span>
                    </div>
                    <div class="post">
                        <div class="row custom-rw">
                            <div class="col-6 custom-col">
                                <div class="date" id="execdate">
                                    <div class="blk-head">Date</div>
                                    <input type="date" alt="date" class="date-ip htmlEle" />
                                    <span class="date-icon"></span>
                                </div>
                            </div>
                            <div class="col-6 custom-col">
                                <div class="blk-head">Time</div>
                                <div class="time-ip htmlEle">
                                    Send now
                                    <span class="time-icon"></span>
                                </div>
                            </div>
                            <div class="col-6 custom-col">
                                <div class="blk-head rec">Recurrence</div>
                                <div class="selc">
                                    <select class="cs htmlEle" id="recurrance">
                                        <option value="Does not repeat" selected>Does not repeat </option>
                                        <option value="Every weekday">Every weekday (Mon-Fri)</option>
                                        <option value="Weekly">Weekly</option>
                                        <option value="Monthly">Monthly</option>
                                        <option value="Custom">Custom</option>
                                    </select>
                                    <span class="sel-chev2"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="prev">Preview</div>
                    <div class="br-blk">
                        <div class="created">Posted by <span id="usertext"></span></div>
                        <span class="divider">|</span>
                        <div class="reflections">Reflections are<span id="privacytext">  </span></div>
                        <div class="feeling" id="selectedTxt"></div>
                        <div class="smiles">
                            <span class="ava">
                                <img src="~/Images/1.png" alt="smile1" class="avatars">
                            </span>
                            <span class="ava">
                                <img src="~/Images/2.png" alt="smile2" class="avatars">
                            </span>
                            <span class="ava">
                                <img src="~/Images/3.png" alt="smile3" class="avatars">
                            </span>
                            <span class="ava">
                                <img src="~/Images/4.png" alt="smile4" class="avatars">
                            </span>
                            <span class="ava">
                                <img src="~/Images/5.png" alt="smile5" class="avatars">
                            </span>
                        </div>
                    </div>
                </div>
                <div class="mf">
                    <span class="clk"></span>
                    <span class="manage" onclick="openTaskModule()">Manage recurring reflections <span>(3)</span> </span>
                    <div class="float-right">
                        <button type="button" class="btn-cancle" data-dismiss="modal" onclick="closeTaskModule()">Close</button>
                        <button type="button" class="btn-send" onclick="SendAdaptiveCard()">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"></script>
    <script src="@("https://unpkg.com/@microsoft/teams-js@1.4.1/dist/MicrosoftTeams.min.js")"></script>

    <script>
        var questions = [];
        var userobject = {};
        $(document).ready(function () {

            microsoftTeams.initialize();
            var accesstoken="";
            GetUserDetails(context.userObjectId, accesstoken);
                   
            $.ajax({
                url: "api/GetAccessTokenAsync",
                type: "Get",
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Accept':'application/json'
                },
                success: function (data) {
                    var data1 = JSON.parse(data);
                    console.log(data1);
                    microsoftTeams.getContext(function (context) {
                        GetUserDetails(context.userObjectId,data1.access_token)
                    });
                    
                }
            })
            var blockdata = ""
            $.ajax({
                type: 'GET',
                url: 'api/GetAllDefaultQuestions',
                success: function (data) {
                    questions = data;
                    data.forEach(x => {
                        blockdata = blockdata + ' <option class="default-opt" id="'+x.questionID+'" value="'+x.question+'">';

                    })
                    $("#questions").html(blockdata);
                    

                }
            });
            $("body").click
                (
                    function (e) {
                        if (e.target.className !== "form-control questioninput") {
                            $('#questionsblock').addClass('hidequestions');
                            $('#questionsblock').removeClass('showquestions');
                        }
                    }
                );
            $("select").change(function () {
                $(this).find("option:selected").each(function () {
                    var optionValue = $(this).attr("value");
                    if (optionValue) {
                        $(".box").not("." + optionValue).hide();
                        $("." + optionValue).show();
                    } else {
                        $(".box").hide();
                    }
                });
            }).change();
 });

        function SendAdaptiveCard() {
            var list = document.querySelectorAll(".htmlEle");
            var htmObj = {};
            list.forEach((obj, i) => {
                htmObj[obj.getAttribute("data-attr")] = obj.value;
            });
            let index = questions.findIndex(x => x.question == $('#questions-list').val())
            var questionid = null
            if (index != -1) {
                questionid = questions[index].questionID
                console.log(questionid);
            }

            let taskInfo = {
                question: $('#questions-list').val(),
                questionID: questionid,
                privacy: $('#privacy').val(),
                ExecutionDate: $('#execdate').val(),
                ExecutionTime: $('#exectime').val(),
                postDate: "",
                postSendNowFlag: true,
                recurssionType: $('#recurrance').val(),
                action: "sendAdaptiveCard"
            };
            taskInfo.card = "";
            taskInfo.height = "medium";
            taskInfo.width = "medium";
            microsoftTeams.tasks.submitTask(taskInfo);
            return true;
        };

        function  getSelectedOption(event){
                $('#selectedTxt').html($('#questions-list').val())
        }

        function setPrivacy() {
            $('#privacytext').html($('#privacy').val())
        }

        function GetUserDetails(userid, accesstoken) {
            alert(accesstoken);
             $.ajax({
                        url: "https://graph.microsoft.com/beta/users/"+userid,
                        type: "GET",
                        async: false,
                        beforeSend: function (request) {
                            request.setRequestHeader("Authorization", "Bearer " + "eyJ0eXAiOiJKV1QiLCJub25jZSI6ImRXSjhiQjV2Ql9Kc3M5MDN0dmV3WGJCRndyNm9RcmwyRTBOVUY2aG5mUUUiLCJhbGciOiJSUzI1NiIsIng1dCI6IkN0VHVoTUptRDVNN0RMZHpEMnYyeDNRS1NSWSIsImtpZCI6IkN0VHVoTUptRDVNN0RMZHpEMnYyeDNRS1NSWSJ9.eyJhdWQiOiJodHRwczovL2dyYXBoLm1pY3Jvc29mdC5jb20vIiwiaXNzIjoiaHR0cHM6Ly9zdHMud2luZG93cy5uZXQvNzJmOTg4YmYtODZmMS00MWFmLTkxYWItMmQ3Y2QwMTFkYjQ3LyIsImlhdCI6MTU4OTc4MzY2MSwibmJmIjoxNTg5NzgzNjYxLCJleHAiOjE1ODk3ODc1NjEsImFjY3QiOjAsImFjciI6IjEiLCJhaW8iOiJBVVFBdS84UEFBQUFCWWkyM3YwQitHL2VsbWdsN29MclNySVF4ZE9ORlc0RERLcWw2NDhmUFpGOS9YTHdqUHc1dU92aWxNWW5ockVrY01JQzhrU0pHa0NkSisrMjVyZG9Ddz09IiwiYW1yIjpbInJzYSIsIm1mYSJdLCJhcHBfZGlzcGxheW5hbWUiOiJSZWZsZWN0IiwiYXBwaWQiOiIzODhhMzk1Mi01YWNlLTQ0YjUtYmMxYi0wODIzNzJhZDcwOWIiLCJhcHBpZGFjciI6IjEiLCJkZXZpY2VpZCI6ImEyN2FlNmI1LWQyODUtNDI0Ny1hZGIwLTdhMzYwM2NjNTc1NyIsImZhbWlseV9uYW1lIjoiQW5hcGFydGhpIiwiZ2l2ZW5fbmFtZSI6IkFydW4gS3VtYXIiLCJpcGFkZHIiOiI3My4xNTcuNDQuMTU3IiwibmFtZSI6IkFydW4gS3VtYXIgQW5hcGFydGhpIChaZW4zIEluZm9zb2x1dGlvbnMgQW1lcmljYSBJbmMpIiwib2lkIjoiOGY3OTQyNjgtZWNiNS00Y2QzLWI1NTctMzQ1YjY3MDE5MTU1Iiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTIxNDY3NzMwODUtOTAzMzYzMjg1LTcxOTM0NDcwNy0yMzQyNzI1IiwicGxhdGYiOiIzIiwicHVpZCI6IjEwMDNCRkZEQTlCQUM3MEEiLCJyaCI6IjAuQVJvQXY0ajVjdkdHcjBHUnF5MTgwQkhiUjFJNWlqak9XclZFdkJzSUkzS3RjSnNhQUdNLiIsInNjcCI6IlVzZXIuUmVhZCIsInNpZ25pbl9zdGF0ZSI6WyJkdmNfbW5nZCIsImR2Y19jbXAiLCJkdmNfZG1qZCIsImttc2kiXSwic3ViIjoiQ0tMSlRZdU9KaWdvRmpkaFctckVQdVRHYUxEcHJ3a2NvWXVyZGpyNUZ4dyIsInRpZCI6IjcyZjk4OGJmLTg2ZjEtNDFhZi05MWFiLTJkN2NkMDExZGI0NyIsInVuaXF1ZV9uYW1lIjoidi1hcnVhbmFAbWljcm9zb2Z0LmNvbSIsInVwbiI6InYtYXJ1YW5hQG1pY3Jvc29mdC5jb20iLCJ1dGkiOiJfb1VTTmFycWswZWRtSWIyZG53LUFBIiwidmVyIjoiMS4wIiwieG1zX3RjZHQiOjEyODkyNDE1NDd9.PGLWcZcz-s1lZXCxvVLxz_sQtGmWpTGIo0kpc_smCL0kkffm_NvomEf20X0ND3EqlOTm1j4CNA-BKyJqPRQQ37UES9Hcm9Nk8gG2DCAz6oPo4Orl0eWOgjc-j-S0amYpQO5_T5UeuhPAMio9w5CtZg9JO77trrA_kjFoG15ICp4ocupNtEo9Mn4GnGDj1Dw4-G2k-UstQeCp7nII9E3ZGi-N_COdVSAX7WClW8nId_VWIfaNHfQid7GuVWuurRzEpCxVwcZkUnTMMTKZSPd67y0AVFU6U22Z_LGMz-_REMpCysxx_uv-vXHDSyU9yCm9Ddk0vK70CEeLVsCNHePIXg");
                        },
                        success: function (response) {
                            if (response != null) {
                                userobject = response;
                                $("#username").html(userobject.displayName)
                                Console.log(userobject);
                            } else {
                                alert("Something went wrong");
                            }
                        },
                        error: function () {
                            console.log("Failed");
                        }
                    });
        }

        submitHandler = (err, result) => {
            //if (result.action == "Chaining") {
            //        let taskInfo = {
            //        title: "",
            //        height: "",
            //        width: "",
            //        Url: ""
            //    };
            //    taskInfo.Url = "https://1a48ca6e.ngrok.io/First";
            //    taskInfo.height = 550;
            //    taskInfo.width = 780;
            //    microsoftTeams.tasks.startTask(taskInfo, submitHandler)
            //}
            console.log("Reached submithandler!")

        };

        function openTaskModule() {
            let linkInfo = {
                action: "ManageRecurringPosts",
            };
            microsoftTeams.tasks.submitTask(linkInfo);
            return true;
        };

        function closeTaskModule() {
            let closeTaskInfo = {
                action: "closeFirstTaskModule"
            };
            microsoftTeams.tasks.submitTask(closeTaskInfo);
            return true;
        };

        function addShowHideButton() {
            if ($('#questionsblock').hasClass('hidequestions')) {
                $('#questionsblock').removeClass('hidequestions');
                $('#questionsblock').addClass('showquestions');
            }
            else {
                $('#questionsblock').addClass('hidequestions');
                $('#questionsblock').removeClass('showquestions');
            }
        }

    </script>
</body>



</html>